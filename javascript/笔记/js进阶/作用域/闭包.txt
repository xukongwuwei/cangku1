概念：一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域
简单理解：闭包 =  内层函数 + 外层函数的变量 

闭包作用：封闭数据，提供操作，外部也可以访问函数内部的变量

闭包应用：实现数据的私有
比如，我们要做个统计函数调用次数，函数调用一次，就++
如果是全局变量，所有作用域都可以修改
如果是在局部，只有局部可以修改

因为把闭包赋值给了全局变量，所以一直存在，可能发生内存泄漏

等于返回一个匿名函数，然后匿名函数里面需要变量，因为在匿名函数里没有变量，所以就去上一级找（作用域链），找过一次之后（let 变量声明），内部函数就直接调用这个变量，因为把闭包赋值给了全局变量，所以一直存在，就会在内存保留这个变量（内部没有声明，所以不会清除），不会被清除（在全局变量里），所以下次就不用去上一级找（所以不会再重新声明），直接执行代码