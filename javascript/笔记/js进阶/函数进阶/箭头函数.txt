引入箭头函数的目的是更简短的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁
使用场景：箭头函数更适用于那些本来需要匿名函数的地方
语法1：基本写法
const fn=(形参)=>{  
内容
}
fn( )

语法2：只有一个参数可以省略小括号
const fn=形参=>{
内容
}
fn()	

语法3：如果函数体只有一行代码，可以写到一行上，并且无需写 return 直接返回值
const fn=(参数)=>内容
fn( )

事件里
元素.addEventListener('click',e=>e.preventDefault())  //阻止默认行为

语法4：加括号的函数体返回对象字面量表达式
const fn=uname =>({uname : uname})  //给对象加个( ),因为两个{ }无法识别，所以外面的大括号改为 ( )


2. 箭头函数参数
1. 普通函数有arguments 动态参数
2. 箭头函数没有 arguments 动态参数，但是有 剩余参数 ..args


3. 箭头函数 this
在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的this值， 非常令人讨厌。
箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this。
在开发中【使用箭头函数前需要考虑函数中 this 的值】，事件回调函数使用箭头函数时，this 为全局的 window，因此
DOM事件回调函数为了简便，还是不太推荐使用箭头函数