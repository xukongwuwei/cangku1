封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。
 同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之
间是彼此不影响的
总结：
1. 构造函数体现了面向对象的封装特性
2. 构造函数实例创建的对象彼此独立、互不影响

封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。
 前面我们学过的构造函数方法很好用，但是 存在浪费内存的问题

我们希望所有的对象使用同一个函数，这样就比较节省内存，那么我们要怎样做呢？

原型：
构造函数通过原型分配的函数是所有对象所 共享的。
JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象
这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存
我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。
构造函数和原型对象中的this 都指向 实例化的对象
原型属性在构造函数上
语法：
function Star(name){
this.name=name  //构造函数放属性
}
Star.prototype.sing=function(){ }  //原型里放方法  

构造函数和原型对象中的this 都指向 实例化的对象