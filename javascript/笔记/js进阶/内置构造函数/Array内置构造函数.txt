Array 是内置的构造函数，用于创建数组
const arr = new Array(1,2,a,b)
创建数组建议使用字面量创建，不用 Array构造函数创建

数组常见实例方法-核心方法

forEach 遍历数组 不返回，用于不改变值，经常用于查找打印输出值
filter 过滤数组 筛选数组元素，并生成新数组
map 迭代数组 返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据
reduce 累计器 返回函数累计处理的结果，经常用于求和等
用法： 数组.方法()

reduce 返回函数累计处理的结果，经常用于求和等，
语法：
数组.reduce(function(累计值，当前元素[,索引号][,源数组]){},起始值)   //起始值可以省略，如果写就作为第一次累计的起始值
累计值参数：
1. 如果有起始值，则以起始值为准开始累计， 累计值 = 起始值
2. 如果没有起始值， 则累计值以数组的第一个数组元素作为起始值开始累计
3. 后面每次遍历就会用后面的数组元素 累计到 累计值 里面 （类似求和里面的 sum ）
求和运算：
数组.reduce((prev,item)=>prev+item)

- 伪数组转换为真数组
静态方法 Array.from(数组名)

常用的方法：
2. 实例方法 `forEach` 用于遍历数组，替代 `for` 循环 (重点)

3. 实例方法 `filter` 过滤数组单元值，生成新数组(重点)

4. 实例方法 `map` 迭代原数组，生成新数组(重点)

5. 实例方法 `join` 数组元素拼接为字符串，返回字符串(重点)

6. 实例方法  `find`  查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)

7. 实例方法`every` 检测数组所有元素是否都符合指定条件，如果**所有元素**都通过检测返回 true，否则返回 false(重点)

8. 实例方法`some` 检测数组中的元素是否满足指定条件   **如果数组中有**元素满足条件返回 true，否则返回 false

9. 实例方法 `concat`  合并两个数组，返回生成新数组

10. 实例方法 `sort` 对原数组单元值排序

11. 实例方法 `splice` 删除或替换原数组单元

12. 实例方法 `reverse` 反转数组

13. 实例方法 `findIndex`  查找元素的索引值