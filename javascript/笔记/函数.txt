函数是被设计为执行特定任务的代码块
函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于
精简代码方便复用。
比如我们前面使用的 alert() 、 prompt() 和 console.log() 都是一些 js 函数，只不过已经封装好了，我们直接使用的

函数声明语法：
function 函数名(){
	函数体//代码，要实现的功能
}

函数的调用：
函数名()

return 可以返回数组
return 可以返回`一句话`
return是结束程序加返回数组

相同名字的函数，后面的覆盖前面的

实参数多于形参数，多余的实参不参与运算，会被忽略 

实参少于形参 ，就会给剩余的没被分配的形参自动填上undefined


匿名函数  就是没有名字的函数，所以无法直接使用
使用方式：  函数表达式  ，立即执行函数
函数表达式：将匿名函数赋值给一个变量，并且通过变量名进行调用 ，在声明函数的时候赋值，然后用变量名调用例如：声明：let 变量名=function(){}   调用：变量名()
函数表达式和具名函数（有名字的函数）的不同：具名函数的调用可以写到任何位置，可以在函数声明前调用，也可以在函数声明后面调用。函数表达式必须先写表达式，才能调用

立即执行函数：使用场景：避免全局变量之间的污染 第一种语法：(function( ){ 代码 }) ( );立即执行函数之间结尾要加;本质是前面的小括号把函数包起来，后面的小括号是调用，所以等于直接调用=立即执行  第二种语法：(function(){}());第二种是把整个匿名函数包起来，里面的第二个小括号还是调用的意思