是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。
比如，规定用户只能输入英文26个英文字母，普通字符的话 abcdefghijklm…..  但是换成元字符写法： [a-z]
参考文档：
MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions
正则测试工具: http://tool.oschina.net/regex

为了方便记忆和学习，我们对众多的元字符进行了分类：
边界符（表示位置，开头和结尾，必须用什么开头，用什么结尾）
量词 （表示重复次数）
字符类 （比如 \d 表示 0~9）

正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符
^  //表示匹配行首的文本以谁开始
$  //表示匹配行尾的文本以谁结束
如果 ^ 和 $ 在一起，表示必须是精确匹配，整句话要一模一样

量词
量词用来 设定某个模式出现的次数
*       //重复0次或更多次
+      //重复1次或更多次
？     //重复0次或1次
{n}    //重复n次
{n,}    //重复n次到更多次
{n,m}   //重复n到m次
注意： 逗号左右两侧千万不要出现空格

字符类：
[ ] 匹配字符集合
后面的字符串只要包含 [ ] 中任意一个字符，都返回 true 。
[ ] 里面加上 - 连字符
使用连字符 - 表示一个范围
比如：
[a-z] 表示 a 到 z 26个英文字母都可以
[a-zA-Z] 表示大小写都可以
[0-9] 表示 0~9 的数字都可以

[ ] 里面加上 ^ 取反符号
比如：
[^a-z] 匹配除了小写字母以外的字符
 注意要写到中括号里面

 . 匹配除换行符之外的任何单个字符

预定义：指的是 某些常见模式的简写方式。
\d	//匹配0-9之间的任一数字，相当于[0-9]
\D	//匹配所有0-9以外的字符，相当于[^0-9]
\w	//匹配任意的字母，数字和下划线，相当于[A-Za-z0-9]
\W	//除所有字母，数字和下划线以外的字符，相当于[^A-Za-z0-9]
\s	//匹配空格(包括换行符，制表符，空格符等)，相当于[\t\r\n\v\f]
\S	//匹配非空格的字符，相当于[^\t\r\n\v\f]


分组是用圆括号“()”括起来的正则表达式，匹配出的内容就表示一个分组。使用分组，可以从目标字符串中提取出与圆括号内正则表达式相匹配的内容，把想要的内容提取出来
有两种场景会使用到分组。
1.是：对一个子表达式进行重复；2.是：想要获取到子表达式匹配到的内容，把想要的内容提取出来

1.对子表达式进行重复
如果需要重复单个字符，直接在字符后面加上限定符即可，例如 a+ 表示匹配1个或一个以上的a，a?表示匹配0个或1个a。
但是我们如果要对多个字符进行重复的话，就需要用到 分组 。
比如：(ab){3} 表示 ab 字符重复3次

2.获取到子表达式匹配到的内容
比如表达式: [a-z]*\d*[a-z]*，它表示a-z的字符重复0到多次，后面紧跟0到多个数字，后面再跟上多个a-z的字符。
显然，字符串 abcd324232efg 是满足匹配的串。那么，如果我们只想要获取到匹配串中数字 324232 后面的串 efg 呢？

这时，就可以通过分组的方式来改写正则表达式: [a-z]*\d*([a-z]*)。这样，我们就可以通过获取第 1 个分组匹配到的内容来达到目的。


