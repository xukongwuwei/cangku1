CSS3 的现状
新增的CSS3特性有兼容性问题，ie9+才支持
 移动端支持优于 PC 端
 不断改进中
 应用相对广泛
 现阶段主要学习：新增选择器和盒子模型以及其他特性

CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。
1. 属性选择器
2. 结构伪类选择器
3. 伪元素选择器

 属性选择器：
属性选择器可以根据元素特定属性的来选择元素。 这样就可以不用借助于类或者id选择器
选择符E[att]  //选择具有att属性的E元素
E[att="val"]  //选择具有att属性且属性值等于val的E元素
E[att^="val"]  // 匹配具有att属性且值以val开头的e元素
E[att$="val"]  //匹配具有att属性且值以val结尾的E元素
E[att*="val"]  //匹配具有att属性且值中含有val的E元素
注意：类选择器、属性选择器、伪类选择器，权重为 10。

结构伪类选择器：
结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元素
父元素 E：first-child   //匹配父元素中的第一个子元素E  这个先匹配顺序，再对比元素
父元素 E：last-child	//匹配父元素中最后一个E元素
父元素 E：nth-child(n)  //匹配父元素中的第n个子元素E
父元素 E：first-of-type  //指定类型E的第一个   这个先元素，再匹配顺序
父元素 E：last-of-type  //指定类型E的最后一个  
父元素 E：nth-of-type  //指定类型E的第n个  
父元素 E：not(:nth-child(n))   //好像只能用这种选择器才能用这个not除了这个其他的都 例子： table tr:not(:nth-child(1)):hover {
            background-color: rgba(255, 0, 0, 0.616);
        } //除了第一个tr其他的都可以做这个事情
区别：
1. nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第n个孩子，然后看看是否和E匹配
2. nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子

nth-child（n） 选择某个父元素的一个或多个特定的子元素（重点）
n 可以是数字，关键字和公式
 n 如果是数字，就是选择第 n 个子元素， 里面数字从1开始…
 n 可以是关键字：even 偶数，odd 奇数
 n 可以是公式：常见的公式如下 ( 如果n是公式，则从0开始计算，但是第 0 个元素或者超出了元素的个数会被忽略 )
2n 偶数
2n+1 奇数
5n 5的倍数
n+5 从第5个开始到最后
-n+5  前五个（到这数上去）
小结
 结构伪类选择器一般用于选择父级里面的第几个孩子
 nth-child 对父元素里面所有孩子排序选择（序号是固定的） 先找到第n个孩子，然后看看是否和E匹配
 nth-of-type 对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子
 关于 nth-child（n） 我们要知道 n 是从 0 开始计算的，要记住常用的公式
 如果是无序列表，我们肯定用 nth-child 更多
 类选择器、属性选择器、伪类选择器，权重为 10

伪元素选择器：
伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构。
::before   //在元素内部的前面插入内容
::after   //在元素内部的后面插入内容

注意：
 before 和 after 创建一个元素，但是属于行内元素
 新创建的这个元素在文档树中是找不到的，所以我们称为伪元素
 语法： element::before {} 
 before 和 after 必须有 content 属性
 before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素
 伪元素选择器和标签选择器一样，权重为 1


 CSS3 盒子模型：
CSS3 中可以通过 box-sizing 来指定盒模型，有2个值：即可指定为 content-box、border-box，这样我们

 /*CSS3盒子模型*/
 box-sizing: border-box;
 /*传统盒子模型*/
 box-sizing: content-box;
计算盒子大小的方式就发生了改变。

2.5 CSS3 盒子模型
可以分成两种情况：
1. box-sizing: content-box 盒子大小为 width + padding + border （以前默认的）
2. box-sizing: border-box 盒子大小为 width
如果盒子模型我们改为了box-sizing: border-box ， 那padding和border就不会撑大盒子了（前提padding
和border不会超过width宽度）

 CSS3 其他特性
1. 图片变模糊
2. 计算盒子宽度 width: calc 函数

CSS3滤镜filter:filter CSS属性将模糊或颜色偏移等图形效果应用于元素。
filter: 函数(); 例如： filter: blur(5px); blur模糊处理 数值越大越模糊

CSS3 calc 函数:
calc() 此CSS函数让你在声明CSS属性值时执行一些计算。width: calc(100% - 80px);
括号里面可以使用 + - * / 来进行计算。
CSS3 还增加了一些 动画 2D 3D 等新特性

CSS3 过渡（重点）：
过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或
JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。
过渡动画： 是从一个状态 渐渐的过渡到另外一个状态
可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响
页面布局。
我们现在经常和 :hover 一起 搭配使用。
transition: 要过渡的属性 花费时间 运动曲线 何时开始;
1.属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都
变化过渡， 写一个all 就可以。
2. 花费时间： 单位是 秒（必须写单位） 比如 0.5s 
3. 运动曲线： 默认是 ease （可以省略）linear匀速  ease逐渐慢下来 ease-in加速 ease-out减速  ease-in-out先加速后减速
4.何时开始 ：单位是 秒（必须写单位）可以设置延迟触发时间 默认是 0s （可以省略）
记住过渡的使用口诀： 谁做过渡给谁加

2D 转换
转换（transform）是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果，转换（transform）你可以简单理解为变形
移动：translate
 旋转：rotate
 缩放：scale
二维坐标系：
2D转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系、

2D 转换之移动 translate
2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。
语法：
transform: translate(x,y); 或者分开写
transform: translateX(n);
transform: translateY(n);
重点：
定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素
 translate最大的优点：不会影响到其他元素的位置
 translate中的百分比单位是相对于自身元素的 translate:(50%,50%);
 对行内标签没有效果

2D 转换之旋转 rotate
2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转
语法：
transform:rotate(度数)
重点：
rotate里面跟度数， 单位是 deg 比如 rotate(45deg)
 角度为正时，顺时针，负时，为逆时针
 默认旋转的中心点是元素的中心点

2D 转换中心点 transform-origin
我们可以设置元素转换的中心点
语法：
transform-origin: x y;
重点：
注意后面的参数 x 和 y 用空格隔开
 x y 默认转换的中心点是元素的中心点 (50% 50%)
 还可以给x y 设置 像素 或者 方位名词 （top bottom left right center）

 2D 转换之缩放scale
缩放，顾名思义，可以放大和缩小。 只要给元素添加上了这个属性就能控制它放大还是缩小
语法：
transform:scale(x,y);
注意：注意其中的x和y用逗号分隔
 transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大
 transform:scale(2,2) ：宽和高都放大了2倍
 transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)
 transform:scale(0.5,0.5)：缩小
 sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子

 2D 转换综合写法：
注意：
1. 同时使用多个转换，其格式为：transform: translate() rotate() scale() ...等，
2. 其顺序会影转换的效果。（先旋转会改变坐标轴方向）
3. 当我们同时有位移和其他属性的时候，记得要将位移放到最前

 2D 转换总结：
转换transform 我们简单理解就是变形 有2D 和 3D 之分
 我们暂且学了三个 分别是 位移 旋转 和 缩放
 2D 移动 translate(x, y) 最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的
 可以分开写比如 translateX(x) 和 translateY(y)
 2D 旋转 rotate(度数) 可以实现旋转元素 度数的单位是deg
 2D 缩放 sacle(x,y) 里面参数是数字 不跟单位 可以是小数 最大的优势 不影响其他盒子
 设置转换中心点 transform-origin : x y; 参数可以百分比、像素或者是方位名词
 当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前

动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常
用来实现复杂的动画效果。
相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果
动画的基本使用
制作动画分为两步：
1.先定义动画
2.再使用（调用）动画
1. 用keyframes 定义动画（类似定义类选择器）
@keyframes 动画名称 {
 0%{
 width:100px;
 } 
 100%{
 width:200px;
 }
}动画序列
 0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。
 在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。
 动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。
 请用百分比来规定变化发生的时间，或用关键词 "from" 和 "to"，等同于 0% 和 100%。

2. 元素使用动画
div {
 width: 200px;
 height: 200px;
 background-color: aqua;
 margin: 100px auto;
 /* 调用动画 */
 animation-name: 动画名称;
 /* 持续时间 */
 animation-duration: 持续时间;

 动画常用属性：
@keyframes 规定动画。
animation 所有动画属性的简写属性，除了animation-play-state属性。
animation-name 规定@keyframes动画的名称。（必须的）
animation-duration 规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）
animation-timing-function 规定动画的速度曲线，默认是“ease”。
animation-delay 规定动画何时开始，默认是0。
animation-iteration-count 规定动画被播放的次数，默认是1，还有infinite
animation-direction 规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放
animation-play-state 规定动画是否正在运行或暂停。默认是"running",还有"paused"。
animation-fill-mode 规定动画结束后状态，保持forwards回到起始backwards

 动画简写属性：
animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;
简写属性里面不包含 animation-play-state 
 暂停动画：animation-play-state: puased; 经常和鼠标经过等其他配合使用
 想要动画走回来 ，而不是直接跳回来：animation-direction ： alternate
 盒子动画结束后，停在结束位置： animation-fill-mode ： forwards

 速度曲线细节
animation-timing-function：规定动画的速度曲线，默认是“ease	
linear 动画从头到尾的速度是相同的。匀速
ease 默认。动画以低速开始，然后加快，在结束前变慢。
ease-in 动画以低速开始。
ease-out 动画以低速结束。
ease-in-out 动画以低速开始和结束。
steps() 指定了时间函数中的间隔数量（步长）
 }